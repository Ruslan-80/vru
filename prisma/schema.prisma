generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "mysql"
    url       = env("MYSQL_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id               Int               @id @default(autoincrement())
    fullName         String
    email            String            @unique
    password         String
    role             UserRole          @default(USER)
    verified         DateTime          @default(now())
    provider         String?
    providerId       String?
    cart             Cart?
    orders           Order[]
    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([email, role])
}

model Cart {
    id          Int        @id @default(autoincrement())
    token       String
    totalAmount Int        @default(0)
    user        User?      @relation(fields: [userId], references: [id])
    userId      Int?       @unique
    items       CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id            Int              @id @default(autoincrement())
    productItem   ProductVariation @relation(fields: [productItemId], references: [id])
    productItemId Int
    quantity      Int              @default(1)
    cart          Cart             @relation(fields: [cartId], references: [id])
    cartId        Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id           Int         @id @default(autoincrement())
    token        String      @unique
    totalAmount  Int
    status       OrderStatus @default(PENDING)
    paymentId    String?
    items        Json
    customerInfo Json
    fullName     String
    address      String
    email        String
    phone        String
    comment      String?
    user         User?       @relation(fields: [userId], references: [id])
    userId       Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId, status])
}

model VerificationCode {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    Int      @unique
    code      String
    expiresAt DateTime @default(now())

    @@unique([userId, code])
}

model Category {
    id          Int           @id @default(autoincrement())
    parentId    Int?
    name        String
    slug        String        @unique
    description String?
    children    Category[]    @relation("CategoryToParent")
    parent      Category?     @relation("CategoryToParent", fields: [parentId], references: [id])
    products    Product[]
    tags        CategoryTag[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([parentId, slug])
}

model Product {
    id                Int                @id @default(autoincrement())
    categoryId        Int
    article           String             @unique
    name              String
    slug              String             @unique
    description       String?
    basePrice         Int
    manufacturingTime String
    stock             Int
    visibility        Boolean            @default(true)
    category          Category           @relation(fields: [categoryId], references: [id])
    variations        ProductVariation[]
    attributes        ProductAttribute[]
    mediaFiles        MediaFile[]
    tags              ProductTag[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([categoryId, slug])
    @@fulltext([name, description, article])
}

model ProductVariation {
    id             Int     @id @default(autoincrement())
    productId      Int
    sku            String  @unique
    variationValue String
    price          Int
    stock          Int
    isDefault      Boolean @default(false)

    product  Product    @relation(fields: [productId], references: [id])
    cartItem CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([productId, sku])
}

model Tag {
    id         Int           @id @default(autoincrement())
    name       String        @unique
    slug       String        @unique
    products   ProductTag[]
    categories CategoryTag[]
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt

    @@index([name, slug])
}

model ProductTag {
    id        Int     @id @default(autoincrement())
    productId Int
    tagId     Int
    product   Product @relation(fields: [productId], references: [id])
    tag       Tag     @relation(fields: [tagId], references: [id])

    @@unique([productId, tagId])
}

model CategoryTag {
    id         Int      @id @default(autoincrement())
    categoryId Int
    tagId      Int
    category   Category @relation(fields: [categoryId], references: [id])
    tag        Tag      @relation(fields: [tagId], references: [id])

    @@unique([categoryId, tagId])
}

model Attribute {
    id       Int                @id @default(autoincrement())
    name     String
    slug     String             @unique
    values   AttributeValue[]
    products ProductAttribute[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([slug])
}

model AttributeValue {
    id          Int    @id @default(autoincrement())
    attributeId Int
    valueString String
    valueNumber Int?

    products  ProductAttribute[]
    attribute Attribute          @relation(fields: [attributeId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([attributeId, valueString])
}

model ProductAttribute {
    id               Int            @id @default(autoincrement())
    productId        Int
    attributeId      Int
    attributeValueId Int
    product          Product        @relation(fields: [productId], references: [id])
    attribute        Attribute      @relation(fields: [attributeId], references: [id])
    attributeValue   AttributeValue @relation(fields: [attributeValueId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([productId, attributeId, attributeValueId])
}

model MediaFile {
    id        Int      @id @default(autoincrement())
    productId Int
    type      FileType
    url       String
    product   Product  @relation(fields: [productId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([productId, type])
}

enum FileType {
    IMAGE
    VIDEO
    DOCUMENT
}

enum OrderStatus {
    PENDING
    PROCESSING
    COMPLETED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}
